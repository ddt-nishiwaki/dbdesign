ビジネスロジックの実装方法の検討

本文で代理キーについて解説した際、テーブルに主キーを設定せず重複行データを登録後に削除する、という間違った設計について触れました。しかし、主キーによる一意性制約に限らず、データが満たすべきさまざまな条件(ビジネスロジック)を、テーブルの制約ではなく、アプリケーションコードで実装することは一般的に行われています。
さて、このビジネスとジックをアプリケーションコードで実装することについて、以下の問いについて答えてください。

	(問い１) ビジネスロジックをアプリケーションコードで実装することの是非
	(問い２) ビジネスロジックをデータベースの「トリガー」で実装することの是非


回答：

	(問１)

		極力行わない方がいいですが、現実問題として実装する場合は'責任の所在'を明確にする必要があると考えます。
		ビジネスロジックの要件を満たす解決法として「アプリケーション側での実装」を選択することはDB側で解決できるかどうかを考えた後で検討するべきです。アプリケーション側でロジックを追加した場合、不具合が出た時にDB側に問題があるのかアプリケーションコードに問題があるのか分かりづらくなるからです。DB側で設定できることについてはDB側で全て設定することで、責任の所在が明確になります。これによって不具合に対する対応も分かりやすくなるはずです。

		しかし、DB側での設定で解決できないロジックについてはアプリケーション側で実装しなければならない現実もあると思います。この場合「DB側で設定できない」ということがどういうことなのかを明確に定義することが必要と考えます。具体的にはDB側で「どこまで非正規化に対応するか」を考えます。これはシステムによって基準がバラバラであり考え方も異なるため案件ごとの状況から決定するしかないのですが、条件としては「バットノウハウ」で解決しないということが条件となります。一般的にやってはいけないとされている解決法にはそれなりの理由があります。あえてその解決法を選択することにメリットはありません。


	(問２)

		トリガーはINSERT,UPDATEやDELETE操作をイベントとして受け取り起動する操作であり、例えばDELETEを実行した場合のバックアップ処理をトリガーで自動化するような場合に便利な機能ですが、これをビジネスロジックに組み込むのは危険だと感じます。
		トリガーをシステムのロジックに組み込んでしまうと、データ設計がトリガーに依存してしまいます。トリガーは設定した本人は'覚えて'いても、それが他の人に共有されていなかった場合はどうでしょうか？何かの更新をした際に'意図せず'トリガーが実行されてしまい想定と異なる結果になるかもしれません。それがバックアップなど、直接システムに関わらない内容ならいいですが、特定の関連するデータを削除したり、更新したりしていて最悪システムが動かなくなるといったことになると大変なことになるのは目に見えています。また、１つや２つなら管理できても、大量のトリガーを設定した場合に管理しきれるかどうかも問題です。
		以上のことから運用できる範囲内で、それを共有できる環境があればトリガーでのロジック追加も致し方ないと思いますが、そうでない場合は別の解決法を探すべきです。
